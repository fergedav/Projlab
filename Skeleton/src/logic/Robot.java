package logic;
import java.util.Random;

public class Robot extends Traveler {
    
    /**
     *
     */
    private static final long serialVersionUID = -3138426053591207283L;
    /**
     * Konstruktor
     */
    public Robot()
    {
        super();
        setPrefix("robot_"+id_counter++);
        Controller.getInstance().addRobot(this);
    }
    /**
     * Visszatér egy véletlen választott számmal. A robot
     * erre az idexû aszteroidára lép majd át.
     * @return választott sorszámú aszteroida a listából
     */
    private int whereTo()
    {
        //rand = true, det = false
        int n = 0;
        if(behavior)
        {
            int num = currentLocation.numOfNeighbor();
            if(num == 0) 
                return 0;
            Random r = new Random();
            n = r.nextInt(num);
        }
        return n;
    }

    /**
     * Lépést indít a pillanatnyi tartózkodási helyének véletlen szomszédjára.
     */
    private void robotMoves()
    {  
        int next = whereTo();
        move(next);
    }

    /**
     * ha meghívódik, akkor a robot egy másik, az aktuális aszteroidájának egy szomszédjára kerül át.
     */
    @Override
    public void explosion()
    {
        robotMoves();
    }

    /**
     * A robot meghal.
     * 
     * Az aszteroidára, amin jelenleg tartózkodik,
     * önmagával meghívja a RemoveTraveler(Traveler t) metódust,
     * majd a controler-nek is jelzi önmagával meghívva Robot_die(Robot r) metódust, majd törli önmagát.
     */
    @Override
    public void die()
    {
        currentLocation.removeTraveler(this);        

        controler.robotDie(this);
    }

    /**
     * A robot megnézi, hogy az aktuális aszteroidáján lehet-e még fúrni. Ha igen fúr,
     * ha nem, akkor a RobotMoves() metódusával véletlen lép. A WhereTo() metódusával eldönti,
     * hogy melyik szomszédos aszteroidára lépjen tovább, majd átlép oda.
     */
    @Override
    public void step()
    {
        if(currentLocation.getLayers()!=0){
            digging();
        }
        else
            robotMoves();
    }

    //a skeleton erejéig segédfgv
    public void setLocation(Orbit o){
        currentLocation = o;
    }
    
    //PROTO FÜGGVÉNYEK INNENTÕL//////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Determinisztikus - random viselkedes
     * rand = true, det = false
     */
    private boolean behavior;
    /**
     * Determinisztikus - random viselkedeshez
     *  rand = true, det = false
     * @param det_rand boolean viselkedés
     */
    public void setBehavior(boolean det_rand)
    {
        behavior = det_rand;
    }
    public void robotInfo(){
        System.out.println(
            "RobotId: "+ this.prefix+" Location: "+ currentLocation.getPrefix()
        );
    }
    /**
     * Id -ja a robotnak
     */
    public static int id_counter = 0;
}
